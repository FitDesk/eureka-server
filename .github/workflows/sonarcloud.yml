name: CI / SonarCloud
on:
  pull_request:
  push:
    branches: ["main"]

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Build & Run Sonar
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn -B -DskipTests verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=${{ secrets.PROJECT_KEY }} \
            -Dsonar.organization=${{ secrets.ORG_KEY }} \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} \
            -Dsonar.pullrequest.branch=${{ github.head_ref }} \
            -Dsonar.pullrequest.base=${{ github.base_ref }}

  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-java@v4
        with: { distribution: temurin, java-version: 21 }

      - name: Make Maven wrapper executable
        run: chmod +x ./mvnw

      - run: ./mvnw clean package -DskipTests

      # Cambiamos de ACR a Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/fitdesk-service:${{ github.sha }}
          docker build -t $IMAGE .
          docker push $IMAGE
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      # Login a Azure con usuario/contraseña
      # Login a Azure con usuario/contraseña
      # Login a Azure con un enfoque más seguro
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Continúa con la creación del contenedor
      - name: Deploy to Azure Container Instances
        run: |
          RG=fitdesk
          NAME=fitdesk-service
          az container delete -g $RG -n $NAME --yes || true
          az container create -g $RG -n $NAME --image ${{ env.IMAGE }} --cpu 1 --memory 1.5 --ports 8761 --dns-name-label $NAME-${{ github.run_number }}

      # Verificación de salud (igual que antes)
      - run: |
          URL="http://$(az container show -g fitdesk -n fitdesk-service --query ipAddress.ip -o tsv):8761/actuator/health"
          for i in {1..10}; do
            if curl -fs $URL; then echo "OK"; exit 0; fi
            sleep 5
          done
          exit 1
